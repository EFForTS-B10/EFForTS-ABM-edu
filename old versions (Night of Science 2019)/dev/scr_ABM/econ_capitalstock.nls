To-report optimal-capitalstock [landuse pp-management age]
  ;; Report the item age from the capitalstock list if available, otherwise report the last item from the list
  let capital-stock-cell item age item pp-management [l_mng_optimal_capitalstock] of a-lut landuse
  report capital-stock-cell
end


;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To-report calculate-household-capitalstock 
  ;updates the capital stock of all household patches and then
  ;sums up capital stock from all household cells and reports the household capitalstock   
  let household-capitalstock sum [p_capitalstock] of h_patches
  report household-capitalstock   
End

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To calculate-optimal-capitalstocks-all-landuses
  ;reports a list where each entry is a list of optimal capital stocks for one land use for the first 100 years of plantation.
  ;this function is executed only once in the setup, as the values do not change over the simulation time
  ;100 years should normally be a sufficient time also if we do not use a maximum plantation age  
  ;; Loop over LUT-ids and LUT-manage-ids and calculate capitalstocks:
  foreach LUT-ids
  [
    lut-id ->
    
    foreach item lut-id LUT-ids-manage
    [
      lut-id-manage ->
      
      let depriciation-young [l_depriciation_rate_young] of a-lut lut-id
      let depriciation-old [l_depriciation_rate_old] of a-lut lut-id
      let switch-age [l_depriciation_rate_switch] of a-lut lut-id
     
      let capital-stock-cell optimal-invest lut-id lut-id-manage 0
      let opt-capital-stock-list (list 0 capital-stock-cell) ;list in which optimal capital stocks will be stored
      let age 1
      
      while[age < 100]
      [     
        set capital-stock-cell ifelse-value (age <= switch-age) 
        [capital-stock-cell * (1 - depriciation-young) + optimal-invest lut-id lut-id-manage age]
        [capital-stock-cell * (1 - depriciation-old) + optimal-invest lut-id lut-id-manage age]
        
        ;; Add to list:
        set opt-capital-stock-list lput capital-stock-cell opt-capital-stock-list
        set age age + 1
      ]
    
      ;; add variable to current management variale list:
      ;set LUT-manage setman lut-id lut-id-manage "optimal_capitalstock" opt-capital-stock-list
      ask a-lut lut-id
      [
        set l_mng_optimal_capitalstock replace-item lut-id-manage l_mng_optimal_capitalstock opt-capital-stock-list
      ]
      
    ]
  ]
End  

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To update-capital-stocks-cell
  ;at the beginning of each year, before the land-use change decision takes place, capital stocks of all cells are updated according to the capital stock and investment costs of the last year
  ask patches with [p_owner != -1 and member? p_landuse LUT-ids]
  [
    let capitalstock-last-year ifelse-value (p_age = 0) [0][p_capitalstock]  
    let depriciation_switch [l_depriciation_rate_switch] of a-lut p_landuse
    let depriciation_young [l_depriciation_rate_young] of a-lut p_landuse
    let depriciation_old [l_depriciation_rate_old] of a-lut p_landuse

    let capitalstock-new ifelse-value (p_age <= depriciation_switch) [capitalstock-last-year * (1 - depriciation_young) + p_invest][capitalstock-last-year * (1 - depriciation_old) + p_invest]
    
    set p_capitalstock_previous p_capitalstock
    set p_capitalstock capitalstock-new
  ]
  
End  
  