;###################################################################################
; ╦┌┐┌┌─┐┬ ┬┌┬┐
; ║│││├─┘│ │ │ 
; ╩┘└┘┴  └─┘ ┴ 
;###################################################################################

;###################################################################################
; LOAD MAPS FROM INPUT FOLDER
;###################################################################################

To import-maps
  let folder-connection ""
  ;; Open map:
  ifelse (which-map = "EFForTS-LGraf")
  [ 
    ls_run_graffe
    set folder-connection "../02_EFForTS-LGraf/1_Model/EFForTS-LGraf/output" 
  ]
  [
    set folder-connection (word "input/maps/" which-map) ;read-folder-connection
  ]

  ; imports externally produced map as input for the model
  read-road-file folder-connection
  read-homebase-file folder-connection
  create-and-put-turtles-in-homebase
  read-ownership-file folder-connection
  read-patch-id-file folder-connection
  read-land-use-type-file folder-connection
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To read-road-file [folder-connection]
  ;loads road rasterfile and coordinate system and sets gis:envelope
  ;resizes the world size to fit the map extent and matches the gis:envelope to the world transformation 
   
  gis:load-coordinate-system (word folder-connection "/road-raster.prj")
  set road-file gis:load-dataset (word folder-connection "/road-raster.asc")
  set envelope gis:envelope-of road-file
  set number-of-cells-x gis:width-of road-file
  set number-of-cells-y gis:height-of road-file
  ;print "number cells x"
  ;print number-of-cells-x
 
  resize-world 0 (number-of-cells-x - 1) 0 (number-of-cells-y - 1)
  gis:set-transformation envelope (list 0 max-pxcor 0 max-pycor)
  gis:apply-raster road-file p_road ; puts values from the raster data into the patch variable
   
End

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To read-homebase-file [folder-connection]
 ;reads the raster file containing the homebase cells of farmers  
 let homebase-file gis:load-dataset (word folder-connection "/homebase-raster.asc")
 
 gis:apply-raster homebase-file p_homebase ; puts values from the raster data into the patch variable 
  ask patches  
  [
    if p_homebase >= 0 [set pcolor black]
  ]   
End  

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To create-and-put-turtles-in-homebase
  ; based on the homebase-file, the number of turtles is created and put into the homebase cells 
  
  ;ct  ;clear turtles
  
  
  ask patches with [p_homebase >= 0]
  [
    sprout-hhs 1
    [
      ;set shape "person"
      set shape "house"
      set color hh-color
      set size 2
      set h_homebase patch-here
      set h_id p_homebase
    ]
  ]
  
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To read-ownership-file [folder-connection]
  
  let ownership-file gis:load-dataset (word folder-connection "/ownership-raster.asc")

  gis:apply-raster ownership-file p_owner ; puts values from the raster data into the patch variable 

  ;put all patches that belong to a household into the h_patches list  
  ask hhs
  [
    set h_patches (patch-set patches with [p_owner = [h_id] of myself]) 
    ask h_patches
    [
      set p_owner myself
    ]
  ]
   
End

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To read-patch-id-file [folder-connection]
  
  let patch-id-file gis:load-dataset (word folder-connection "/patch-id-raster.asc")
  
  
  gis:apply-raster patch-id-file p_id ; puts values from the raster data into the patch variable 
  ask patches  
  [
    if p_id > 0 [set pcolor p_id]
  ]   
  
  ;add all patch-ids of one household into the h_field_id list
  
  ask hhs
  [
    let turtle-field-ids []
    ask h_patches
    [
      set turtle-field-ids lput p_id turtle-field-ids
    ]  
    set h_field_id_list remove-duplicates turtle-field-ids
  
  ]
End  

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To read-land-use-type-file [folder-connection]
  
  let land-use-file gis:load-dataset (word folder-connection "/land-use-type-raster.asc")
  gis:apply-raster land-use-file p_landuse ; puts values from the raster data into the patch variable 
  
  ;; Reclassify:
  ask patches
  [
    if (p_landuse = 0) [set p_landuse -100] ;roads and forests - matrix
    if (p_landuse > 0 and p_landuse <= 5) [set p_landuse p_landuse - 1]
    if (p_landuse = 1000) [set p_landuse 5 set p_owner -100] ;; Inaccessible area
  ]
  
End 

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To write-road-file
  ;produces a raster file with 0 for non-road cells and 1 for road cells 
  ;let new-raster gis:create-raster (max-pxcor + 1) (max-pycor + 1) gis:envelope-of road-shapefile
  
  let new-raster gis:create-raster (max-pxcor + 1) (max-pycor + 1) gis:world-envelope
   
  let xcount 0
  let ycount max-pycor
  let ycount-raster 0
  while [ycount >= 0]
  [
    while[xcount <= max-pxcor]
    [ 
      ;print xcount
      ;print ycount
      
      gis:set-raster-value new-raster xcount ycount-raster [p_road] of patch xcount ycount
      set xcount xcount + 1
    ]
    set xcount 0
    set ycount ycount - 1
    set ycount-raster ycount-raster + 1
  ]

  gis:store-dataset new-raster "road-raster.asc"

End 

;###################################################################################
; CALL EFForTS-LGraf TO GENERATE A MAP
;###################################################################################
to ls_run_graffe
  
  ;; Reset levelspace and load the model
  ls:reset
  let LGraf-GUI? false
  let EFForTS-LGraf "../02_EFForTS-LGraf/1_Model/EFForTS-LGraf/EFForTS-LGraf.nlogo"
  ifelse (LGraf-GUI?)[ls:create-interactive-models 1 EFForTS-LGraf][ls:create-models 1 EFForTS-LGraf]
  print "--EFForTS-LGraf successfully loaded--"
  
  ;; Load parameters into the LGraf model instance

  ;; Basic model setup
  ls:let gr-reproducible? gr-reproducible?
  ls:ask ls:models [set reproducable? gr-reproducible?]  
  ls:let gr-rnd-seed gr-rnd-seed
  ls:ask ls:models [set rnd-seed gr-rnd-seed]
  ls:let gr-width gr-width
  ls:ask ls:models [set width gr-width ]
  ls:let gr-height gr-height
  ls:ask ls:models [set height gr-height]
  ls:let gr-cell-length-meter gr-cell-length-meter
  ls:ask ls:models [set cell-length-meter gr-cell-length-meter]
  
  ;; Roads
  ls:let gr-road.algorithm gr-road.algorithm
  ls:ask ls:models [set road.algorithm gr-road.algorithm]
  ls:let gr-road-map-id gr-road-map-id
  ls:ask ls:models [set road-map-id gr-road-map-id]
  ls:let gr-total-road-length gr-total-road-length
  ls:ask ls:models [set total-road-length gr-total-road-length]
  ls:let gr-min-dist-roads gr-min-dist-roads
  ls:ask ls:models [set min-dist-roads gr-min-dist-roads]
  ls:let gr-perlin-octaves gr-perlin-octaves
  ls:ask ls:models [set perlin-octaves gr-perlin-octaves]
  ls:let gr-perlin-persistence gr-perlin-persistence
  ls:ask ls:models [set perlin-persistence gr-perlin-persistence]
  ls:let gr-cone-angle gr-cone-angle
  ls:ask ls:models [set cone-angle gr-cone-angle]
  ls:let gr-dist-weight gr-dist-weight
  ls:ask ls:models [set dist-weight gr-dist-weight]
  ls:let gr-households-per-cell gr-households-per-cell
  ls:ask ls:models [set households-per-cell gr-households-per-cell]

  ;; Initialization
  ls:let gr-setup-model gr-setup-model
  ls:ask ls:models [set setup-model gr-setup-model]
  ls:let gr-number-of-households gr-number-of-households
  ls:ask ls:models [set number-of-households gr-number-of-households]
  ls:let gr-number-of-villages gr-number-of-villages
  ls:ask ls:models [set number-of-villages gr-number-of-villages]
  ls:let gr-proportion-agricultural-area gr-proportion-agricultural-area
  ls:ask ls:models [set proportion-agricultural-area gr-proportion-agricultural-area]

  ;; HH area
  ls:let gr-hh-area-distribution gr-hh-area-distribution
  ls:ask ls:models [set hh-area-distribution gr-hh-area-distribution]
  ls:let gr-hh-area-mean-ha gr-hh-area-mean-ha
  ls:ask ls:models [set hh-area-mean-ha gr-hh-area-mean-ha]
  ls:let gr-hh-area-sd-ha gr-hh-area-sd-ha
  ls:ask ls:models [set hh-area-sd-ha gr-hh-area-sd-ha]
  
  ;; VLG area
  ls:let gr-vlg-area-distribution gr-vlg-area-distribution
  ls:ask ls:models [set vlg-area-distribution gr-vlg-area-distribution]
  ls:let gr-vlg-area-mean gr-vlg-area-mean
  ls:ask ls:models [set vlg-area-mean gr-vlg-area-mean]
  ls:let gr-vlg-area-sd gr-vlg-area-sd
  ls:ask ls:models [set vlg-area-sd gr-vlg-area-sd]
  
  ;; HH type 2
  ls:let gr-occ-probability gr-occ-probability
  ls:ask ls:models [set occ-probability gr-occ-probability]
  ls:let gr-hh-distribution gr-hh-distribution
  ls:ask ls:models [set hh-distribution gr-hh-distribution]
  ls:let gr-hh-type-mean gr-hh-type-mean
  ls:ask ls:models [set hh-type-mean gr-hh-type-mean]
  ls:let gr-hh-type-sd gr-hh-type-sd
  ls:ask ls:models [set hh-type-sd gr-hh-type-sd]
  
  ;; Inacc area
  ls:let gr-inaccessible-area-location gr-inaccessible-area-location
  ls:ask ls:models [set inaccessible-area-location gr-inaccessible-area-location]
  ls:let gr-inaccessible-area-distribution gr-inaccessible-area-distribution
  ls:ask ls:models [set inaccessible-area-distribution gr-inaccessible-area-distribution]
  ls:let gr-inaccessible-area-fraction gr-inaccessible-area-fraction
  ls:ask ls:models [set inaccessible-area-fraction gr-inaccessible-area-fraction]
  ls:let gr-inaccessible-area-mean gr-inaccessible-area-mean
  ls:ask ls:models [set inacc-area-mean gr-inaccessible-area-mean]
  ls:let gr-inaccessible-area-sd gr-inaccessible-area-sd
  ls:ask ls:models [set inacc-area-sd gr-inaccessible-area-sd]
  
  ;; Fields
  ls:let gr-field-size-distribution gr-field-size-distribution
  ls:ask ls:models [set field-size-distribution gr-field-size-distribution]
  ls:let gr-field-size-mean-ha gr-field-size-mean-ha
  ls:ask ls:models [set field-size-mean-ha gr-field-size-mean-ha]
  ls:let gr-field-size-sd-ha gr-field-size-sd-ha
  ls:ask ls:models [set field-size-sd-ha gr-field-size-sd-ha]
  ls:let gr-s1.homebase gr-s1.homebase
  ls:ask ls:models [set s1.homebase gr-s1.homebase]
  ls:let gr-s2.fields gr-s2.fields
  ls:ask ls:models [set s2.fields gr-s2.fields]
  ls:let gr-s3.nearby gr-s3.nearby
  ls:ask ls:models [set s3.nearby gr-s3.nearby]
  ls:let gr-s4.avoid gr-s4.avoid
  ls:ask ls:models [set s4.avoid gr-s4.avoid]
  ls:let gr-change-strategy gr-change-strategy
  ls:ask ls:models [set change-strategy gr-change-strategy]
  ls:let gr-set-field-strategies-by-id? gr-set-field-strategies-by-id?
  ls:ask ls:models [set set-field-strategies-by-id? gr-set-field-strategies-by-id?]
  ls:let gr-field-strategies-id gr-field-strategies-id
  ls:ask ls:models [set field-strategies-id gr-field-strategies-id]
  
  ;; Land use types  
  ls:let gr-land-use-types gr-land-use-types
  ls:ask ls:models [set land-use-types gr-land-use-types]
  ls:let gr-LUT-fill-up gr-LUT-fill-up
  ls:ask ls:models [set LUT-fill-up gr-LUT-fill-up]
  ls:let gr-LUT-0-fraction gr-LUT-0-fraction
  ls:ask ls:models [set LUT-1-fraction gr-LUT-0-fraction]
  ls:let gr-LUT-1-fraction gr-LUT-1-fraction
  ls:ask ls:models [set LUT-2-fraction gr-LUT-1-fraction]
  ls:let gr-LUT-2-fraction gr-LUT-2-fraction
  ls:ask ls:models [set LUT-3-fraction gr-LUT-2-fraction]
  ls:let gr-LUT-3-fraction gr-LUT-3-fraction
  ls:ask ls:models [set LUT-4-fraction gr-LUT-3-fraction]
  ls:let gr-LUT-4-fraction gr-LUT-4-fraction
  ls:ask ls:models [set LUT-5-fraction gr-LUT-4-fraction]
  ls:let gr-LUT-0-specialize gr-LUT-0-specialize
  ls:ask ls:models [set LUT-1-specialize gr-LUT-0-specialize]
  ls:let gr-LUT-1-specialize gr-LUT-1-specialize
  ls:ask ls:models [set LUT-2-specialize gr-LUT-1-specialize]
  ls:let gr-LUT-2-specialize gr-LUT-2-specialize
  ls:ask ls:models [set LUT-3-specialize gr-LUT-2-specialize]
  ls:let gr-LUT-3-specialize gr-LUT-3-specialize
  ls:ask ls:models [set LUT-4-specialize gr-LUT-3-specialize]
  ls:let gr-LUT-4-specialize gr-LUT-4-specialize
  ls:ask ls:models [set LUT-5-specialize gr-LUT-4-specialize]  
  ls:let gr-foldername "output"
 
  ls:ask ls:models [set foldername gr-foldername]
  ls:let gr-default.maps gr-default.maps
  ls:ask ls:models [set default.maps gr-default.maps]
  ls:let gr-write-household-ids gr-write-household-ids
  ls:ask ls:models [set write-household-ids gr-write-household-ids] 

  print "EFForTS-LGraf: Loading Parameters finished!"
  
  ;; RUN GRAFFE:
  ls:ask ls:models [setup]
  print "EFForTS-LGraf: Setup Finished!"
  
  ls:ask ls:models [establish_fields]
  print "EFForTS-LGraf: Simulation finished!"
  
  ls:ask ls:models [assign-land-uses]
  print "EFForTS-LGraf: Landuse finished!"
  
  ls:ask ls:models [write-output]
  print "EFForTS-LGraf: Write output finished!"
  
  print "--Closing EFForTS-LGraf--"
  ls:close ls:models

end



;TODO: not needed anymore -> delete

;;to load-lgraf-parameters-from-extra-parameters-tab
;  ;; Basic model setup
;  ls:let gr-reproducible? xw:get "gr-reproducible?"
;  ls:ask ls:models [set reproducible? gr-reproducible?]  
;  ls:let gr-rnd-seed xw:get "gr-rnd-seed"
;  ls:ask ls:models [set rnd-seed xw:get "gr-rnd-seed"]
;  ls:let gr-width xw:get "gr-width"
;  ls:ask ls:models [set width xw:get "gr-width" ]
;  ls:let gr-height xw:get "gr-height"
;  ls:ask ls:models [set height xw:get "gr-heightxw:get"]
;  ls:let gr-cell-length-meter xw:get "gr-cell-length-meter"
;  ls:ask ls:models [set cell-length-meter xw:get "gr-cell-length-meter"]
;  
;  ;; Roads
;  ls:let gr-road.algorithm xw:get "gr-road.algorithm"
;  ls:ask ls:models [set road.algorithm xw:get "gr-road.algorithm"]
;  ls:let gr-road-map-id xw:get "gr-road-map-id"
;  ls:ask ls:models [set road-map-id xw:get "gr-road-map-id"]
;  ls:let gr-total-road-length xw:get "gr-total-road-length"
;  ls:ask ls:models [set total-road-length xw:get "gr-total-road-length"]
;  ls:let gr-min-dist-roads xw:get "gr-min-dist-roads"
;  ls:ask ls:models [set min-dist-roads xw:get "gr-min-dist-roads"]
;  ls:let gr-perlin-octaves xw:get "gr-perlin-octaves"
;  ls:ask ls:models [set perlin-octaves xw:get "gr-perlin-octaves"]
;  ls:let gr-perlin-persistence xw:get "gr-perlin-persistence"
;  ls:ask ls:models [set perlin-persistence xw:get "gr-perlin-persistence"]
;  ls:let gr-cone-angle xw:get "gr-cone-angle"
;  ls:ask ls:models [set cone-angle xw:get "gr-cone-angle"]
;  ls:let gr-dist-weight xw:get "gr-dist-weight"
;  ls:ask ls:models [set dist-weight xw:get "gr-dist-weight"]
;  ls:let gr-households-per-cell xw:get "gr-households-per-cell"
;  ls:ask ls:models [set households-per-cell xw:get "gr-households-per-cell"]
;
;  ;; Initialization
;  ls:let gr-setup-model xw:get "gr-setup-model"
;  ls:ask ls:models [set setup-model xw:get "gr-setup-model"]
;  ls:let gr-number-of-households xw:get "gr-number-of-households"
;  ls:ask ls:models [set number-of-households xw:get "gr-number-of-households"]
;  ls:let gr-number-of-villages xw:get "gr-number-of-villages"
;  ls:ask ls:models [set number-of-villages xw:get "gr-number-of-villages"]
;  ls:let gr-proportion-agricultural-area xw:get "gr-proportion-agricultural-area"
;  ls:ask ls:models [set proportion-agricultural-area xw:get "gr-proportion-agricultural-area"]
;
;  ;; HH area
;  ls:let gr-hh-area-distribution xw:get "gr-hh-area-distribution"
;  ls:ask ls:models [set hh-area-distribution xw:get "gr-hh-area-distribution"]
;  ls:let gr-hh-area-mean-ha xw:get "gr-hh-area-mean-ha"
;  ls:ask ls:models [set hh-area-mean-ha xw:get "gr-hh-area-mean-ha"]
;  ls:let gr-hh-area-sd-ha xw:get "gr-hh-area-sd-ha"
;  ls:ask ls:models [set hh-area-sd-ha xw:get "gr-hh-area-sd-ha"]
;  
;  ;; VLG area
;  ls:let gr-vlg-area-distribution xw:get "gr-vlg-area-distribution"
;  ls:ask ls:models [set vlg-area-distribution xw:get "gr-vlg-area-distribution"]
;  ls:let gr-vlg-area-mean xw:get "gr-vlg-area-mean"
;  ls:ask ls:models [set vlg-area-mean xw:get "gr-vlg-area-mean"]
;  ls:let gr-vlg-area-sd xw:get "gr-vlg-area-sd"
;  ls:ask ls:models [set vlg-area-sd xw:get "gr-vlg-area-sd"]
;  
;  ;; HH type 2
;  ls:let gr-occ-probability xw:get "gr-occ-probability"
;  ls:ask ls:models [set occ-probability xw:get "gr-occ-probability"]
;  ls:let gr-hh-distribution xw:get "gr-hh-distribution"
;  ls:ask ls:models [set hh-distribution xw:get "gr-hh-distribution"]
;  ls:let gr-hh-type-mean xw:get "gr-hh-type-mean"
;  ls:ask ls:models [set hh-type-mean xw:get "gr-hh-type-mean"]
;  ls:let gr-hh-type-sd xw:get "gr-hh-type-sd"
;  ls:ask ls:models [set hh-type-sd xw:get "gr-hh-type-sd"]
;  
;  ;; Inacc area
;  ls:let gr-inaccessible-area-location xw:get "gr-inaccessible-area-location"
;  ls:ask ls:models [set inaccessible-area-location xw:get "gr-inaccessible-area-location"]
;  ls:let gr-inaccessible-area-distribution xw:get "gr-inaccessible-area-distribution"
;  ls:ask ls:models [set inaccessible-area-distribution xw:get "gr-inaccessible-area-distribution"]
;  ls:let gr-inaccessible-area-fraction xw:get "gr-inaccessible-area-fraction"
;  ls:ask ls:models [set inaccessible-area-fraction xw:get "gr-inaccessible-area-fraction"]
;  ls:let gr-inaccessible-area-mean xw:get "gr-inaccessible-area-mean"
;  ls:ask ls:models [set inacc-area-mean xw:get "gr-inaccessible-area-mean"]
;  ls:let gr-inaccessible-area-sd xw:get "gr-inaccessible-area-sd"
;  ls:ask ls:models [set inacc-area-sd xw:get "gr-inaccessible-area-sd"]
;  
;  ;; Fields
;  ls:let gr-field-size-distribution xw:get "gr-field-size-distribution"
;  ls:ask ls:models [set field-size-distribution xw:get "gr-field-size-distribution"]
;  ls:let gr-field-size-mean-ha xw:get "gr-field-size-mean-ha"
;  ls:ask ls:models [set field-size-mean-ha xw:get "gr-field-size-mean-ha"]
;  ls:let gr-field-size-sd-ha xw:get "gr-field-size-sd-ha"
;  ls:ask ls:models [set field-size-sd-ha xw:get "gr-field-size-sd-ha"]
;  ls:let gr-s1.homebase xw:get "gr-s1.homebase"
;  ls:ask ls:models [set s1.homebase xw:get "gr-s1.homebase"]
;  ls:let gr-s2.fields xw:get "gr-s2.fields"
;  ls:ask ls:models [set s2.fields xw:get "gr-s2.fields"]
;  ls:let gr-s3.nearby xw:get "gr-s3.nearby"
;  ls:ask ls:models [set s3.nearby xw:get "gr-s3.nearby"]
;  ls:let gr-s4.avoid xw:get "gr-s4.avoid"
;  ls:ask ls:models [set s4.avoid xw:get "gr-s4.avoid"]
;  ls:let gr-change-strategy xw:get "gr-change-strategy"
;  ls:ask ls:models [set change-strategy xw:get "gr-change-strategy"]
;  ls:let gr-set-field-strategies-by-id? xw:get "gr-set-field-strategies-by-id?"
;  ls:ask ls:models [set set-field-strategies-by-id? xw:get "gr-set-field-strategies-by-id?"]
;  ls:let xw:get "gr-field-strategies-id gr-field-strategies-id"
;  ls:ask ls:models [set field-strategies-id xw:get "gr-field-strategies-id"]
;  
;  ;; Land use types  
;  ls:let gr-land-use-types xw:get "gr-land-use-types"
;  ls:ask ls:models [set land-use-types xw:get "gr-land-use-types"]
;  ls:let gr-LUT-fill-up xw:get "gr-LUT-fill-up"
;  ls:ask ls:models [set LUT-fill-up xw:get "gr-LUT-fill-up"]
;  ls:let gr-LUT-0-fraction xw:get "gr-LUT-0-fraction"
;  ls:ask ls:models [set LUT-1-fraction xw:get "gr-LUT-0-fraction"]
;  ls:let gr-LUT-1-fraction xw:get "gr-LUT-1-fraction"
;  ls:ask ls:models [set LUT-2-fraction xw:get "gr-LUT-1-fraction"]
;  ls:let gr-LUT-2-fraction xw:get "gr-LUT-2-fraction"
;  ls:ask ls:models [set LUT-3-fraction xw:get "gr-LUT-2-fraction"]
;  ls:let gr-LUT-3-fraction xw:get "gr-LUT-3-fraction"
;  ls:ask ls:models [set LUT-4-fraction xw:get "gr-LUT-3-fraction"]
;  ls:let gr-LUT-4-fraction xw:get "gr-LUT-4-fraction"
;  ls:ask ls:models [set LUT-5-fraction xw:get "gr-LUT-4-fraction"]
;  ls:let gr-LUT-0-specialize xw:get "gr-LUT-0-specialize"
;  ls:ask ls:models [set LUT-1-specialize xw:get "gr-LUT-0-specialize"]
;  ls:let gr-LUT-1-specialize xw:get "gr-LUT-1-specialize"
;  ls:ask ls:models [set LUT-2-specialize xw:get "gr-LUT-1-specialize"]
;  ls:let gr-LUT-2-specialize xw:get "gr-LUT-2-specialize"
;  ls:ask ls:models [set LUT-3-specialize xw:get "gr-LUT-2-specialize"]
;  ls:let gr-LUT-3-specialize xw:get "gr-LUT-3-specialize"
;  ls:ask ls:models [set LUT-4-specialize xw:get "gr-LUT-3-specialize"]
;  ls:let gr-LUT-4-specialize xw:get "gr-LUT-4-specialize"
;  ls:ask ls:models [set LUT-5-specialize xw:get "gr-LUT-4-specialize"]  
;  ls:let gr-foldername "output"
;  ls:ask ls:models [set foldername gr-foldername]
;  ls:let gr-default.maps xw:get "gr-default.maps"
;  ls:ask ls:models [set default.maps xw:get "gr-default.maps"]
;  ls:let gr-write-household-ids xw:get "gr-write-household-ids"
;  ls:ask ls:models [set write-household-ids xw:get "gr-write-household-ids"] 
;end

