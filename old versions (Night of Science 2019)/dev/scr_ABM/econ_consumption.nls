

;###################################################################################
; CONSUMPTION
;###################################################################################

To-report calculate-fix-consumption-household [wealth] 
  ;fix consumption [$] of one household for this year
  let planned_consumption ifelse-value (wealth >= 0) [consumption_base + consumption_frac_wealth * wealth][consumption_base]
  report planned_consumption
End

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To-report substract-fix-consumption-household [wealth debts]
  ;substracts the fix consumption from household wealth and takes up new debts, if necessary
  ;reports new wealth, debts and fix consumption of the household
  
  let fix-consumption calculate-fix-consumption-household wealth
      
  ifelse wealth - fix-consumption >= min-wealth
  [
    set wealth wealth - fix-consumption  ;substract fix consumption before anything 
  ]
  [
    set debts debts + (fix-consumption - (wealth - min-wealth))
    set wealth min-wealth
  ] 
  
  report (list wealth debts fix-consumption)
End  

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To-report calculate-variable-consumption-household [cashflow]
  ;reports the additional variable consumption [$]; is only positive, if there is a positive cashflow in this year 
  let variable-consumption ifelse-value (cashflow > 0) [consumption_frac_cash * cashflow][0]
  report variable-consumption
End

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To aggregate-household-consumption
; Store current mean household consumption in global variables --> report 0 if no turtles are left!  
  set min_hh_consumption ifelse-value (any? hhs) [min [h_consumption] of hhs] [0]
  set max_hh_consumption ifelse-value (any? hhs) [max [h_consumption] of hhs] [0]
  set mean_hh_consumption ifelse-value (any? hhs) [mean [h_consumption] of hhs] [0]

end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To-report payback-debts [wealth debts]
  ;transfers back from weath to debts up to the minimum wealth level
  
  if (wealth > min-wealth) and (debts > 0)
  [
    ifelse debts <= (wealth - min-wealth) ;can pay back all debts
    [
      set wealth wealth - debts
      set debts 0
      set h_debt_years 0
    ]
    [ ;pay back debts up to the minimum wealth level
      let transfer wealth - min-wealth
      set wealth min-wealth
      set debts debts - transfer
    ]
  ] 
  report (list wealth debts)
End  

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To sort-out-bankrupt-turtles
  ;; If a household has too much debts, it goes bankrupt
  ;; The fields of this household are then either consolidated by another neighboring household, or a freshly initialized household buys the fields
  
  ask hhs
  [
    ;; Check if a household has too much debts
    if h_debt_years >= h_debt_years_max_bankrupt
    [
      if (landmarket?)
      [
        ;; Offer the fields on the land market:
        landmarket-init
      ]
    
      die
    ]
  ]
     
end 
    
