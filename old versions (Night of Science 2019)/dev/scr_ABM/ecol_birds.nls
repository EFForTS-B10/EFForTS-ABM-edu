;###################################################################################
; ╔╗ ┬┬─┐┌┬┐  ┌─┐┬┌─┐┬ ┬┌┐┌┌─┐┌─┐┌─┐  ┌─┐┬ ┬┌┐ ┌┬┐┌─┐┌┬┐┌─┐┬  
; ╠╩╗│├┬┘ ││  ├┬┘││  ├─┤│││├┤ └─┐└─┐  └─┐│ │├┴┐││││ │ ││├┤ │  
; ╚═╝┴┴└─└┴┘  ┴└─┴└─┘┴ ┴┘└┘└─┘└─┘└─┘  └─┘└─┘└─┘┴ ┴└─┘─┴┘└─┘┴─┘
;###################################################################################


; weighted distribution sampling
To-report random-weighted [values weights] 
  let selector (random-float sum weights) 
  let running-sum 0 
  
  (foreach values weights [ 
    [?1 ?2] ->
    
    set running-sum (running-sum + ?2) 
    if (running-sum > selector) 
    [ 
      report ?1 
    ] 
  ]) 
End 


To calculate_patch_bird_richness
  
  ;; Step 1: Load files:
  
  ;; Forest (p_landuse -100)
  let values_antRichness_forest item 0 csv:from-file "/input/bird/values_antRichness_forest.csv"
  let weights_antRichness_forest item 0 csv:from-file "/input/bird/weights_antRichness_forest.csv"
  let values_beetleRichness_forest item 0 csv:from-file "/input/bird/values_beetleRichness_forest.csv"
  let weights_beetleRichness_forest item 0 csv:from-file "/input/bird/weights_beetleRichness_forest.csv"
  let values_canopyOpenness_forest item 0 csv:from-file "/input/bird/values_canopyOpenness_forest.csv"
  let weights_canopyOpenness_forest item 0 csv:from-file "/input/bird/weights_canopyOpenness_forest.csv"
  
  ;; Oilpalm (p_landuse = 0)
  let values_antRichness_oilpalm item 0 csv:from-file "/input/bird/values_antRichness_oilpalm.csv"
  let weights_antRichness_oilpalm item 0 csv:from-file "/input/bird/weights_antRichness_oilpalm.csv"
  let values_beetleRichness_oilpalm item 0 csv:from-file "/input/bird/values_beetleRichness_oilpalm.csv"
  let weights_beetleRichness_oilpalm item 0 csv:from-file "/input/bird/weights_beetleRichness_oilpalm.csv"
  let values_canopyOpenness_oilpalm item 0 csv:from-file "/input/bird/values_canopyOpenness_oilpalm.csv"
  let weights_canopyOpenness_oilpalm item 0 csv:from-file "/input/bird/weights_canopyOpenness_oilpalm.csv"
  
  ;; Rubber (p_landuse = 1)
  let values_antRichness_rubber item 0 csv:from-file "/input/bird/values_antRichness_rubber.csv"
  let weights_antRichness_rubber item 0 csv:from-file "/input/bird/weights_antRichness_rubber.csv"
  let values_beetleRichness_rubber item 0 csv:from-file "/input/bird/values_beetleRichness_rubber.csv"
  let weights_beetleRichness_rubber item 0 csv:from-file "/input/bird/weights_beetleRichness_rubber.csv"
  let values_canopyOpenness_rubber item 0 csv:from-file "/input/bird/values_canopyOpenness_rubber.csv"
  let weights_canopyOpenness_rubber item 0 csv:from-file "/input/bird/weights_canopyOpenness_rubber.csv"
 
  
  ;; Junglerubber (p_landuse = 2)
  let values_antRichness_junglerubber item 0 csv:from-file "/input/bird/values_antRichness_junglerubber.csv"
  let weights_antRichness_junglerubber item 0 csv:from-file "/input/bird/weights_antRichness_junglerubber.csv"
  let values_beetleRichness_junglerubber item 0 csv:from-file "/input/bird/values_beetleRichness_junglerubber.csv"
  let weights_beetleRichness_junglerubber item 0 csv:from-file "/input/bird/weights_beetleRichness_junglerubber.csv"
  let values_canopyOpenness_junglerubber item 0 csv:from-file "/input/bird/values_canopyOpenness_junglerubber.csv"
  let weights_canopyOpenness_junglerubber item 0 csv:from-file "/input/bird/weights_canopyOpenness_junglerubber.csv"


  ;; Step 2: Initialize predictors:
  
  ask patches
  [   
    if (p_landuse = -100)
    [
      set p_beetlesRichness random-weighted values_beetleRichness_forest weights_beetleRichness_forest
      set p_antsRichness random-weighted values_antRichness_forest weights_antRichness_forest
      set p_canopy random-weighted values_canopyOpenness_forest weights_canopyOpenness_forest
    ]
    if (p_landuse = 0)
    [
      set p_beetlesRichness random-weighted values_beetleRichness_oilpalm weights_beetleRichness_oilpalm
      set p_antsRichness random-weighted values_antRichness_oilpalm weights_antRichness_oilpalm
      set p_canopy random-weighted values_canopyOpenness_oilpalm weights_canopyOpenness_oilpalm
    ]
    if (p_landuse = 1)
    [
      set p_beetlesRichness random-weighted values_beetleRichness_rubber weights_beetleRichness_rubber
      set p_antsRichness random-weighted values_antRichness_rubber weights_antRichness_rubber
      set p_canopy random-weighted values_canopyOpenness_rubber weights_canopyOpenness_rubber
    ]
    if (p_landuse = 2)
    [
      set p_beetlesRichness random-weighted values_beetleRichness_junglerubber weights_beetleRichness_junglerubber
      set p_antsRichness random-weighted values_antRichness_junglerubber weights_antRichness_junglerubber
      set p_canopy random-weighted values_canopyOpenness_junglerubber weights_canopyOpenness_junglerubber
    ]
      
    ;; Check for spillover
    let spillover_effect 0.25

    if (p_landuse != -100)
    [
      if member? -100 [p_landuse] of neighbors 
      [
        set p_antsRichness p_antsRichness * (1 + 0.5 * spillover_effect)
        set p_beetlesRichness p_beetlesRichness * (1 + 0.1 * spillover_effect)
      ]
    ]
   
    ;; Calculate land-use diversity:
    set p_luDiversity calculate_luDiversity
   
    ;; Calculate bird richness:
    set p_bird_richness round(exp(2.078083 + 0.027132 * p_beetlesRichness + 0.010402 * p_antsRichness - 0.476163 * p_luDiversity + 2.201850 * p_canopy))

  ]  
  
  calculate-bird-richness

End

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To-report calculate_luDiversity
  ; calculate patch neighborhood landuse diversity as the shannon diversity index of landuse patches in 2300m radius
   
  let pi_forest 0
  let pi_oilpalm 0
  let pi_rubber 0
  let pi_junglerubber 0
  
  let ln_pi_forest 0
  let ln_pi_oilpalm 0
  let ln_pi_rubber 0
  let ln_pi_junglerubber 0
  
  set pi_forest (count patches in-radius 46 with [p_landuse = -100] / count patches in-radius 46)
  set pi_oilpalm (count patches in-radius 46 with [p_landuse = 0 ] / count patches in-radius 46)
  set pi_rubber (count patches in-radius 46 with [p_landuse = 1] / count patches in-radius 46)
  set pi_junglerubber (count patches in-radius 46 with [p_landuse = 2] / count patches in-radius 46)
  
  ifelse any? patches in-radius 46 with [p_landuse = -100] [set ln_pi_forest ln(pi_forest)] [set ln_pi_forest 0]
  ifelse any? patches in-radius 46 with [p_landuse = 0] [set ln_pi_oilpalm ln(pi_oilpalm)] [set ln_pi_oilpalm 0]
  ifelse any? patches in-radius 46 with [p_landuse = 1] [set ln_pi_rubber ln(pi_rubber)] [set ln_pi_rubber 0]
  ifelse any? patches in-radius 46 with [p_landuse = 2] [set ln_pi_junglerubber ln(pi_junglerubber)] [set ln_pi_junglerubber 0]
    
  report( -1 * ((pi_oilpalm * ln_pi_oilpalm) + (pi_rubber * ln_pi_rubber) + (pi_junglerubber * ln_pi_junglerubber) + (pi_forest * ln_pi_forest)) )
  
End

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To visualize-bird-richness
  ; visualization of bird species richness per cell by different intensities of red

  let maxRichness max [p_bird_richness] of patches
  let minRichness min [p_bird_richness] of patches

  ask Patches [
    if maxRichness > 0 [
        set pcolor scale-color red p_bird_richness maxRichness minRichness
    ]
  ]


End

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To calculate-bird-richness
  
  let br_forest ifelse-value (any? patches with [p_landuse = -100]) [mean [p_bird_richness] of patches with [p_landuse = -100]][-1]
    let br_oilpalm ifelse-value (any? patches with [p_landuse = 0]) [mean [p_bird_richness] of patches with [p_landuse = 0]][-1]
      let br_rubber ifelse-value (any? patches with [p_landuse = 1]) [mean [p_bird_richness] of patches with [p_landuse = 1]][-1]
        let br_junglerubber ifelse-value (any? patches with [p_landuse = 2]) [mean [p_bird_richness] of patches with [p_landuse = 2]][-1]
  let br_overall mean [p_bird_richness] of patches
  
  set bird_richness (list br_overall br_forest br_oilpalm br_rubber br_junglerubber)
  print bird_richness
  
end