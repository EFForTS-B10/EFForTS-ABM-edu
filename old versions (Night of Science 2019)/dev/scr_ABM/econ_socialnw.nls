;###################################################################################
; LEARNING
;###################################################################################

to learning-spillover
  
  let improve-factor spillover-share
  
  ;; Only households with at least one link can learn
  ask hhs 
  [
    ;; Store the current inefficencies in a temp variable:
    set h_inefficiencies_temp h_inefficiencies
    
    ;; Households cna only improve their inefficiency of landuses they are currently cultivating:
    let myluts remove-duplicates [p_landuse] of h_patches
    
    foreach myluts
    [
      mylut ->
      
      ;; Find connected hhs that also cultivate this landuse:
      let mylut_ineff item mylut h_inefficiencies
      let hhs_connected h_connected_hhs with [member? mylut [p_landuse] of h_patches]
      
      if (any? hhs_connected)
      [
        ;; Calculate the mean inefficiency for this lut:
        let mylut_ineff_nw mean [item mylut h_inefficiencies] of hhs_connected
        
        ;; If this mena inefficiency is lower than the own inefficiency, improve:
        if (mylut_ineff_nw < mylut_ineff)
        [
          set h_inefficiencies_temp replace-item mylut h_inefficiencies_temp (mylut_ineff - (precision ((mylut_ineff - mylut_ineff_nw) * improve-factor) ineff_precision))
        ]
      ]
    ]
  ]
     
  ;; As the new inefficiencies were only stored in temporal variables, we have to update the real inefficiencies:
  ask hhs
  [
    set h_inefficiencies h_inefficiencies_temp 
  ]

end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;; These are two small functions which help to parameterize the learning distance for the spillover function
to spillover-find-max-neighbor-dist
  ;;This function prints the maximum nieghbor distance between two turtles in the landscape
  ;;If this distance is used for the spillover max-dist. All turtles are indirectly connected
  let distance-list []
  
  ask hhs
  [
    set distance-list lput distance min-one-of other hhs [distance myself] distance-list
  ]
  
  print max distance-list
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to spillover-find-max-hh-dist
  ;;This function prints the longest distance between two households in the landscape.
  ;;If this distance is used for the spillover max-dist, all turtles are directly connected
  let distance-list []
  
  ask hhs
  [
    set distance-list lput distance max-one-of other hhs [distance myself] distance-list
  ]
  
  print max distance-list
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to setup_social_networks
  
  ;; Initialize connected hhs:
  ask hhs
  [
    set h_connected_hhs (no-turtles)
  ]
  
  ;; INitialize social network:
  if (setup-hh-network != "hh-nw-none")
  [
    ;; Setup road network:
    clear-links
    ask patches with [p_road = 1]
    [
      if (not any? other hhs-here)
      [
        sprout-hhs 1
        [
          set shape "dot"
          set color red
          set h_id "nw"
        ]
      ]
    ]
    ask hhs
    [
      create-links-with other hhs-on neighbors 
    ]
  
  
    ;; Setup social network, according to interface settings:
    run setup-hh-network 
  
    ;; Create links of social network:
    clear-links
    ask hhs with [h_id = "nw"] [die]
  
    ask hhs
    [
      if (count h_connected_hhs > 0)
      [
        create-links-with h_connected_hhs [set color links-color]
      ]
    ]
  ]
  
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to hh-nw-kernel
  
  ;; Define kernel:
  let kernel-calibration-factor 1.443
  let median-learning-distance hh-nw-param1 ;15 ; cells = 150m
  let kernel-alpha (median-learning-distance * kernel-calibration-factor)
  
  let homebase-turtles hhs with [h_id != "nw"]
  let homebase-distances []
  let already-asked-pairs []
  
  ask homebase-turtles
  [
    ask other homebase-turtles
    [
      ;; Only try to connect the households, if they hadn`t a try before:
      if (not member? (list self myself) already-asked-pairs and not member? (list myself self) already-asked-pairs)
      [
        let dest-distance nw:distance-to myself 
        set already-asked-pairs lput (list self myself) already-asked-pairs
      
      
        if (random-float 1 < get-kernel-probability dest-distance kernel-alpha)
        [
          set homebase-distances lput dest-distance homebase-distances
          set h_connected_hhs (turtle-set h_connected_hhs myself)
        ]
      ]
    ]   
  ]
  
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to-report get-kernel-probability [dist alpha]  
  report (e ^ (- (dist / alpha)))
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to-report get-kernel-distance [p alpha]
  report (ln p / ln e) * (- alpha)  
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to hh-nw-kernel-distance
 
  ;; First select households by using kernel:
  hh-nw-kernel
  
  ;; Then only keep those up to a maximum distance
  let homebase-turtles hhs with [h_id != "nw"]
  ask homebase-turtles
  [
    let kernel-connected-hhs h_connected_hhs
    set h_connected_hhs no-turtles
    
    ask other kernel-connected-hhs
    [
      if (nw:distance-to myself <= hh-nw-param1)
      [
        set h_connected_hhs (turtle-set h_connected_hhs myself)
      ]
    ]
  ]
    
  
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to hh-nw-n-nearest-neighbors
  
  let homebase-turtles hhs with [h_id != "nw"]

  ask homebase-turtles
  [ 
    set h_connected_hhs min-n-of hh-nw-param1 other homebase-turtles [nw:distance-to myself]
  ]

end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to hh-nw-distance
  
  let homebase-turtles hhs with [h_id != "nw"]

  ask homebase-turtles
  [ 
    ask other homebase-turtles
    [
      if (nw:distance-to myself <= hh-nw-param1)
      [
        set h_connected_hhs (turtle-set h_connected_hhs myself)
      ]
    ]
  ]
  
end