;###################################################################################
; ╔═╗┬ ┬┌┬┐┌─┐┬ ┬┌┬┐
; ║ ║│ │ │ ├─┘│ │ │ 
; ╚═╝└─┘ ┴ ┴  └─┘ ┴ 
;###################################################################################


;###################################################################################
; WORLD OUTPUT PAINTING
;###################################################################################
to paint
  paint-landuse
  paint-hhs
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To paint-landuse                                                                               ; now give the patches a color according to their landuse
  ;ask patches [set pcolor (scale-color green landuse (first n-land) (last n-land)) + 15]      ; one generic option
  ask patches
  [
    if p_landuse = -100 [set pcolor matrix-color]                                                          
    if p_landuse = 0 [set pcolor LUT-0-color + p_management]
    if p_landuse = 1 [set pcolor LUT-1-color + p_management] 
    if p_landuse = 2 [set pcolor LUT-2-color + p_management] 
    if p_landuse = 3 [set pcolor LUT-3-color + p_management] 
    if p_landuse = 4 [set pcolor LUT-4-color + p_management] 
    if p_landuse = 5 [set pcolor inacc-color] 
    if (show-roads? and p_road = 1) [set pcolor road-color]
    if (show-homebases? and p_homebase > 0) [set pcolor hh-color]
  ]  
End

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
to paint-hhs
ask hhs [set color hh-color]
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
to paint-fields-by-households
  ask hhs
  [
    set color who 
    ask h_patches with [pcolor != white]
    [
      set pcolor [who] of myself
    ]
  ]
end

;###################################################################################
; PLOT FUNCTIONS
;###################################################################################

to do-plots 
  ;; Landscape level plots:
  paint-plot-carbon
  paint-plot-price
  paint-plot-LUT-fractions
  paint-plot-wealth
  paint-plot-expected-netcashflow
  paint-plot-capitalstock
  paint-plot-hh-consumption
  paint-plot-hh-yield
  paint-plot-hh-yield-gap calc-hh-yield-gaps
  paint-plot-hh-area
end

;###################################################################################
; PLOT FUNCTIONS
;###################################################################################

to paint-plot-carbon
  
  set-current-plot "Carbon in agricultural area"
  let lut-carbon-sum 0
  ;; Plot LUT carbon:
  foreach LUT-ids
  [
    LUT-id ->
    create-temporary-plot-pen runresult (word "LUT-" LUT-id "-folder")
    set-plot-pen-color runresult (word "LUT-" LUT-id "-color")
    let lut-carbon last item LUT-id carbon
    set lut-carbon-sum lut-carbon-sum + lut-carbon
    plot (lut-carbon / area_under_agriculture)
    
  ]
  ;; Total:
  create-temporary-plot-pen "total"
  set-plot-pen-color black
  plot (lut-carbon-sum / area_under_agriculture)

end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to paint-plot-price
  
  set-current-plot "Prices"  
  foreach LUT-ids
  [
    LUT-id ->
    create-temporary-plot-pen runresult (word "LUT-" LUT-id "-folder")
    set-plot-pen-color runresult (word "LUT-" LUT-id "-color")
    plot item LUT-id prices
  ]
    
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to paint-plot-LUT-fractions
  
  set-current-plot "LUT-fractions (owned patches)"
  foreach LUT-ids
  [
    LUT-id ->
    
    create-temporary-plot-pen runresult (word "LUT-" LUT-id "-folder")
    set-plot-pen-color runresult (word "LUT-" LUT-id "-color")
    plot item LUT-id LUT-fractions
  ]
  
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to paint-plot-wealth
  
  let plotname "Household wealth" 
  let x ticks
  let y  [h_wealth] of hhs
  let boxwidth 0.4
  
  if (length y > 2) [boxplot plotname x y boxwidth]
end


;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to paint-plot-expected-netcashflow
 
  let plotname "Household expected netcashflow of chosen option" 
  let x ticks
  let y filter [? -> is-number? ?] [h_netcashflow_exp] of hhs
  let boxwidth 0.4
  
  if (length y > 2) [boxplot plotname x y boxwidth]
 
end


;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to paint-plot-capitalstock
 
  let plotname "Household capitalstock [$]" 
  let x ticks
  let y [h_capitalstock] of hhs
  let boxwidth 0.4
  
  if (length y > 2) [boxplot plotname x y boxwidth]
 
end
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to paint-plot-hh-consumption
  
  let plotname "Household consumption"
  let x ticks
  let y [h_consumption] of hhs 
  let boxwidth 0.4
  
  if (length y > 2) [boxplot plotname x y boxwidth]
  
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to paint-plot-hh-area
  
  let plotname "Household area"
  let x ticks
  let y [h_area] of hhs 
  let boxwidth 0.4
  
  if (length y > 2) [boxplot plotname x y boxwidth]
  
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to paint-plot-hh-yield
  
  foreach LUT-ids
  [
    LUT-id ->  
    set-current-plot (word "LUT-" LUT-id "-mean-yield")
    create-temporary-plot-pen runresult (word "LUT-" LUT-id "-folder")
    set-plot-pen-color runresult (word "LUT-" LUT-id "-color")
    
    ;; Filter households cultivating this landuse:
    let luthhs hhs with [member? LUT-id [p_landuse] of h_patches]
    
    if (any? luthhs)
    [
      plot mean map [? -> item LUT-id ?] [h_production] of luthhs
    ]
  ]
  
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to paint-plot-hh-yield-gap [hh-yield-gaps]
    
  foreach LUT-ids
  [
    lut-id ->
    set-current-plot (word "LUT-" LUT-id "-mean-yield-gap")
    create-temporary-plot-pen "zero"
    plotxy ticks 0
    create-temporary-plot-pen runresult (word "LUT-" LUT-id "-folder")
    set-plot-pen-color runresult (word "LUT-" LUT-id "-color")
    ;; Filter households cultivating this landuse:
    let luthhs hhs with [member? LUT-id [p_landuse] of h_patches]
    
    if (any? luthhs)
    [
      let mean-yield-gap mean map [? -> item lut-id ?] hh-yield-gaps
      plotxy ticks mean-yield-gap
    ]
  ]
  
end



;###################################################################################
; WRITE OUTPUT FILES
;###################################################################################

To write-map-files
  write-lut-map
  write-road-map
End
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
to write-lut-map
  ; Write landuse map
  let new-raster gis:create-raster (max-pxcor + 1) (max-pycor + 1) gis:world-envelope
  let xcount 0
  let ycount max-pycor
  let ycount-raster 0
  while [ycount >= 0]
  [
    while[xcount <= max-pxcor]
    [
      ;print xcount
      ;print ycount
      gis:set-raster-value new-raster xcount ycount-raster [p_landuse] of patch xcount ycount
      set xcount xcount + 1
    ]
    set xcount 0
    set ycount ycount - 1
    set ycount-raster ycount-raster + 1
  ]

  let filename (word "output/lut_" idrunnum "_" but-first (word (1000 + ticks)) ".asc")
  if (file-exists? filename) [file-delete filename]
  gis:store-dataset new-raster filename  
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
to write-road-map
  ;produces a raster file with 0 for non-road cells and 1 for road cells
  let new-raster gis:create-raster (max-pxcor + 1) (max-pycor + 1) gis:world-envelope
  let xcount 0
  let ycount max-pycor
  let ycount-raster 0
  while [ycount >= 0]
  [
    while[xcount <= max-pxcor]
    [
      ;print xcount
      ;print ycount
      gis:set-raster-value new-raster xcount ycount-raster [p_road] of patch xcount ycount
      set xcount xcount + 1
    ]
    set xcount 0
    set ycount ycount - 1
    set ycount-raster ycount-raster + 1
  ]

  let filename (word "output/road_" idrunnum "_" but-first (word (1000 + ticks)) ".asc")
  if (file-exists? filename) [file-delete filename]
  gis:store-dataset new-raster filename
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to write-hh-data-to-file
  
  ;; Write a file each timestep with turtle data
  ;; The file has the following structure:
  ;; runnum   step   hh-ID  h_inefficiency_op   h_inefficiency_rm   netcashflow    netcashflow_expected
  let hh-data-file (word "output/" but-first (word (1000 + behaviorspace-run-number)) "_hh-data.txt")
  
  
  ;; Check if a new file should be written:
  if (ticks = 0)
  [
    ;; Delete old file
    if (file-exists? hh-data-file) [file-delete hh-data-file]
    ;; Open new file
    file-open hh-data-file
    ;; Write header
    file-type "runnumber"
    file-type ","
    file-type "step"
    file-type "," 
    file-type "ID"
    file-type ","
    file-type "h_inefficiency_op"
    file-type ","
    file-type "h_inefficiency_rm"
    file-type ","
    file-type "actual_netcashflow"
    file-type ","
    file-print "predicted_netcashflow"
    file-close
  ]
  
  
  ;; Open the file for writing
  file-open hh-data-file
  
  ;; Write the turtle data to the file:
  ask hhs
  [
    file-type behaviorspace-run-number
    file-type ","
    file-type ticks
    file-type ","
    file-type who
    file-type ","
    file-type h_inefficiencies
    file-type ","
    file-type h_netcashflow
    file-type ","
    file-print h_netcashflow_exp
        
    
  ]
  
  ;; Close the file
  file-close
  
  
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to export-inefficiency-distribution
 
  let filename (word "output/" but-first (word (100 + behaviorspace-run-number)) "_" but-first (word (1000 + ticks)) "_inefficiency_distribution.txt")
  if (file-exists? filename) [file-delete filename]
  
  file-open filename
  
  ;;Write header:
  file-type "runnumber"
  file-type ","
  file-type "step"
  file-type "," 
  file-type "ID"
  file-type "," 
  file-type "ineff_op"
  file-type ","
  file-print "ineff_rm"
  
  ask hhs
  [
    file-type behaviorspace-run-number
    file-type ","
    file-type ticks
    file-type ","
    file-type who
    file-type ","
    file-print h_inefficiencies
  ]
  
  file-close

end



;###################################################################################
; OTHER OUTPUT CALCULATIONS
;###################################################################################
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To calculate_LUT_fractions
  ;calculates fraction of land-use types for all patches that are owned by farmers

  set LUT-fractions []
  
  let owned_patches patches with [p_owner != -1 and p_owner != -100]
  
  foreach LUT-ids
  [
    LUT-id -> 
    let LUT-patches ifelse-value (any? owned_patches) [count owned_patches with [p_landuse = LUT-id] / count owned_patches][0]
    set LUT-fractions lput LUT-patches LUT-fractions
  ]
End

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; New functions for household heterogeneity output
to-report calc-hh-yield-gaps
  
  let yield_gaps_all_hhs []
  
  ;; Calculate yield gaps of oil-palm-farmers:
  ask hhs
  [
    let my_yield_gaps []
    
    foreach LUT-ids
    [
      lut-id ->
      
      let sum_actual_yield sum [p_actual_production] of h_patches with [p_landuse = lut-id]
      let sum_optimal_yield sum [p_optimal_production] of h_patches with [p_landuse = lut-id]
      
      ;; Code to check whether there are negative yields (-> Error!, see econ_production.nls, leontief function)
      if (sum_optimal_yield < 0) [
        type "who: " print who
        type "sum_optimal_yield: " print sum_optimal_yield
        ;type "lut-id: " print lut-id
        ;type "count patches: " print count h_patches with [p_landuse = lut-id]
      ]
      
      
      ;; If there is any optimal yield, calculate the yield gap:
      let yield-gap-lut ifelse-value (sum_optimal_yield > 0) [(sum_optimal_yield - sum_actual_yield) / sum_optimal_yield][0]
      
      set my_yield_gaps lput yield-gap-lut my_yield_gaps
      ;print  my_yield_gaps
    ]
    
    set yield_gaps_all_hhs lput my_yield_gaps yield_gaps_all_hhs
  ]
  report yield_gaps_all_hhs
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to store-screenshot

  if (export-view? = TRUE)
  [
    if remainder simulation_year 5 = 0 [export-view (word "output/expt" 0 simulation_year ".png")] ; export view for every 5th year
  ]
  
end



;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
to boxplot [plotname x y boxwidth]
  set-current-plot plotname
  set y sort y
  let n length y
  let n.quart (n / 4)
  let pos2.topbox max sublist y (n.quart * 2) (n.quart * 3)
  let pos3.median median y
  let pos4.bottombox min sublist y (n.quart * 1) (n.quart * 2)
  let boxrange pos2.topbox - pos4.bottombox
  let pos1.max min (list (pos2.topbox + (boxrange * 1.5)) (max y))
  let pos5.min max (list (pos4.bottombox - (boxrange * 1.5)) (min y))
  let outlier filter [? -> ? < pos5.min or ? > pos1.max] y

  ;; 1st draw the box:
  set-current-plot-pen "box"
  plotxy (ticks - boxwidth) pos4.bottombox
  plot-pen-down
  plotxy (ticks + boxwidth) pos4.bottombox
  plotxy (ticks + boxwidth) pos2.topbox
  plotxy (ticks - boxwidth) pos2.topbox
  plotxy (ticks - boxwidth) pos4.bottombox
  plot-pen-up

  ;; Draw the top whisker:
  set-current-plot-pen "whisker.top"
  plotxy ticks pos2.topbox
  plot-pen-down
  plotxy ticks pos1.max
  plot-pen-up

  ;; Draw the bottom whisker:
  set-current-plot-pen "whisker.bottom"
  plotxy ticks pos4.bottombox
  plot-pen-down
  plotxy ticks pos5.min
  plot-pen-up

  ;; Draw the median:
  set-current-plot-pen "median"
  plotxy (ticks - boxwidth) pos3.median
  plot-pen-down
  plotxy (ticks + boxwidth) pos3.median
  plot-pen-up
  
  ;; Draw outlier:
  set-current-plot-pen "outlier"
  foreach outlier [? -> plotxy ticks ?]
end


;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
to-report log-land-use-change [land-use-change-list landuse_t0 landuse_t1]
  
;  show replace-item 0 [[[][]][[][]]] replace-item 0 item 0 [[[][]][[][]]] lput 2 item 0 item 0 [[[][]][[][]]]
  
  let land-use-change-list-t1 (replace-item landuse_t0 land-use-change-list (replace-item landuse_t1 (item landuse_t0 land-use-change-list)(lput ticks (item landuse_t1 (item landuse_t0 land-use-change-list)))))
  report land-use-change-list-t1 
  
end

to-report log-land-use-change-summary [luc_logs t0 t1]
  
  ;; The reported lists shows counts of how many households have changed land-use or replanted to each land-use.
  ;; The number of elements of the list equals the number of landuses
  ;; For example, for two landuses the list may look like [0 4] for the time interval t0=10, t1=20.
  ;; That means, that between tick 10 and 20, 0 households changed to or replanted landuse 0, but 4 households changed to or replanted landuse 1
  
  ;; Calculates a list from a hh list of luc logs
  let luc_log_summary n-values length LUT-ids [0]

  foreach luc_logs
  [
    h_luc_log ->   ; [[[][]][[][]]]
    
    let lut_t0 0
    foreach h_luc_log
    [
      h_luc_log_lut_t0 ->   ; [[][]]
      let lut_t1 0
      foreach h_luc_log_lut_t0
      [
        h_luc_log_lut_t1 ->   ; []
        
        ;; If there are any items in the list, peep only ticks within t0 and t1
        if (length h_luc_log_lut_t1 > 0)
        [
          set h_luc_log_lut_t1 filter [i -> i >= t0] h_luc_log_lut_t1
          set h_luc_log_lut_t1 filter [i -> i <= t1] h_luc_log_lut_t1
        ]
        ;; If there are any elements left, log that
        if (length h_luc_log_lut_t1 > 0)
        [
          set luc_log_summary replace-item lut_t1 luc_log_summary ((item lut_t1 luc_log_summary) + 1)
        ]
        set lut_t1 (lut_t1 + 1)
      ]
      set lut_t0 (lut_t0 + 1)
    ]
  ]
    
    
  report luc_log_summary
  
end
