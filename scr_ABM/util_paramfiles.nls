

to-report lut-parfile-main-order
  
  let par_order (list "landuse" "inefficiency_alpha" "inefficiency_lambda" 
    "depriciation_rate_young" "depriciation_rate_old" "depriciation_rate_switch" 
    "max_age" "yield_function" "carbon_function" "prices")
  
  report par_order
end

to-report lut-parfile-management-order
  
  let par_order (list "landuse" "management" "labor_function" "tinput_function" "invest_function" "price_tinput" "wages" "yield_factor" "external_income_factor")
  
  report par_order
end

;to read-lut-parameters
; 
;  read-lut-parameter-files
;  
;  set LUT-ids-manage map [? -> range (length ? )] LUT-manage
;end

  
to-report locate-main-file [folder]
  let file-exists FALSE
  if (file-exists? (word "par_ABM/" folder "/main.txt")) [set file-exists (word "par_ABM/" folder "/main.txt")]
  report file-exists
end

to-report locate-management-file [folder nr]
  let file-exists FALSE
  if (file-exists? (word "par_ABM/" folder "/management" nr ".txt")) [set file-exists (word "par_ABM/" folder "/management" nr ".txt")]  
  report file-exists
end
  
to read-lut-parameters
  
  ;; Create vector with ids:
  let all-lut-ids n-values 5 [? -> ?]
  
  ;; Check if folder is defined:
  foreach all-lut-ids
  [
    lut-id ->
    let current-folder run-result (word "LUT-" lut-id "-folder")
    
    ;; Check if parameter file in folder exists:
    if (locate-main-file current-folder != FALSE) 
    [
      ;; Read the file and store parameters:
      let main_content csv:from-file locate-main-file current-folder
      
      ;; Check if param names match the expected parameters:
      ifelse (map [? -> first ?] main_content != lut-parfile-main-order)
      [
        print (word "ERROR: Parameter file incomplete or wrong order! LUT: " current-folder)
      ]
      [
        ; If everything is correct, create a landuse turtle       
        create-luts 1
        [
          set hidden? true
          set l_lut_id lut-id
          set l_landuse (getparamfromcsvline main_content "landuse")
          set l_inefficiency_alpha (getparamfromcsvline main_content "inefficiency_alpha")
          set l_inefficiency_lambda (getparamfromcsvline main_content "inefficiency_lambda")
          set l_depriciation_rate_young (getparamfromcsvline main_content "depriciation_rate_young")
          set l_depriciation_rate_old (getparamfromcsvline main_content "depriciation_rate_old")
          set l_depriciation_rate_switch (getparamfromcsvline main_content "depriciation_rate_switch")
          set l_max_age (getparamfromcsvline main_content "max_age")
          set l_yield_function runresult (getparamfromcsvline main_content "yield_function")
          set l_carbon_function runresult (getparamfromcsvline main_content "carbon_function")
          set l_prices read-from-string (getparamfromcsvline main_content "prices")
          set l_mng_ids []
          set l_mng_management []
          set l_mng_labor_function []
          set l_mng_tinput_function []
          set l_mng_price_tinput []
          set l_mng_invest_function []
          set l_mng_wages []
          set l_mng_yield_factor []
          set l_mng_optimal_capitalstock []
          set l_mng_external_income_factor []
        ]
           
        ;; Read corresponding management files:
        let management-ids n-values 5 [? -> ?]
       
        foreach management-ids
        [
          management-id ->
        
          ;; Look for management files:
          if (locate-management-file current-folder management-id != FALSE) 
          [
            let manag_content csv:from-file locate-management-file current-folder management-id
            
            ;; Check if param names match the expected parameters:
            ifelse (map [? -> first ?] manag_content != lut-parfile-management-order)
            [
              print (word "ERROR: Management file incomplete or wrong order! LUT: " current-folder ", management: " management-id)
            ]
            [
              ;; If everything is correct, store management inside current landuse turtle:
              ask one-of luts with [l_lut_id = lut-id]
              [
                set l_mng_ids lput management-id l_mng_ids
                set l_mng_management lput (getparamfromcsvline manag_content "management") l_mng_management
                set l_mng_labor_function lput runresult (getparamfromcsvline manag_content "labor_function") l_mng_labor_function
                set l_mng_tinput_function lput runresult (getparamfromcsvline manag_content "tinput_function") l_mng_tinput_function
                set l_mng_price_tinput lput (getparamfromcsvline manag_content "price_tinput") l_mng_price_tinput
                set l_mng_invest_function lput runresult (getparamfromcsvline manag_content "invest_function") l_mng_invest_function
                set l_mng_wages lput (getparamfromcsvline manag_content "wages") l_mng_wages
                set l_mng_yield_factor lput (getparamfromcsvline manag_content "yield_factor") l_mng_yield_factor
                set l_mng_optimal_capitalstock lput 0 l_mng_optimal_capitalstock
                set l_mng_external_income_factor lput (getparamfromcsvline manag_content "external_income_factor") l_mng_external_income_factor
              ]
            ]
          ]
        ]
      ]
    ]
  ]
  
  ;; Update IDS:
  let luts-sorted sort luts 
  set LUT-ids map [? -> [l_lut_id] of ?] luts-sorted
  set LUT-ids-manage map [? -> [l_mng_ids] of ?] luts-sorted
  
  file-close-all
end


to-report getparamfromcsvline [paramlist param]
  report last reduce sentence filter [? -> first ? = param] paramlist
end


to show-lut-parameters
  
  foreach LUT-ids
  [
    lut-id ->
    inspect a-lut lut-id
  ]
  
end