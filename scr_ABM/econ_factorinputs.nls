To-report optimal-labor [landuse pp-management age]
  ;; Report the item age from the laborlist if available, otherwise report the last item from the list
  let labor_function item pp-management [l_mng_labor_function] of a-lut landuse
  let labor (runresult labor_function age)
  report labor
end

To-report optimal-tinput [landuse pp-management age]
  ;; Report the item age from the laborlist if available, otherwise report the last item from the list
  let tinput_function item pp-management [l_mng_tinput_function] of a-lut landuse
  let tinput (runresult tinput_function age)
  report tinput
end




;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To-report determine-factor-inputs-for-one-option [option-matrix wealth]
  ;determines factor inputs based on household wealth for one option and one year based on the option matrix which includes field ids, land uses under this option, ages, field size and capital stock 
  ;unavoidable costs (investment costs occuring in this year & costs for capital and land) are calculated and substracted from wealth before calculating factor inputs
  
 ; let turtle-id who
  let number-of-fields item 1 matrix:dimensions option-matrix 
  let factor-inputs matrix:make-constant 3 number-of-fields -10 ;this is the report of this function: a matrix of factor inputs for all fields in this year. rows: field-id, labor input per cell of this field, tinput per cell of this field
  
 ; matrix:set-row factor-inputs 0 [h_field_id_list] of turtle turtle-id ;set first row of factor-inputs 
  matrix:set-row factor-inputs 0 h_field_id_list ;set first row of factor-inputs      
  
  let marginal-gains-fields calculate-marginal-gains-one-option option-matrix ;list of marginal gains for all fields, all marginal gains are >=0
  ;print(word "marginal gains: " marginal-gains-fields)
  
  ;start distributing the (remaining) wealth in the order of decreasing marginal gains   
  let counter 0
  while [counter < number-of-fields] ;go through all fields in the order of decreasing marginal gain. also for those with zero marginal gain, we need to register labor 0 and tinput 0
  [     
    let max-marginal-gain max marginal-gains-fields ;start with the field with highest marginal gain 
    let position-of-max-marginal-gain position max-marginal-gain marginal-gains-fields  ;position item list 
     
    set marginal-gains-fields replace-item position-of-max-marginal-gain marginal-gains-fields -99999  ;marker for fields for which factor input is are already calculated      
    ; originally -1, changed by SebER; because of the outcommented code below, marginal gain can be smaller than -1
    
    ; This outcommented part below makes sense somehow, as if the maximal marginal gain from a cell is negative, 
    ; it does not make sense to invest labor or technical inputs into it and thereby increase the costs further.
    ; However, I realized that at least for oil palm the marginal gain can still be negative within the first productive years, as yields are relatively low and input costs are high.
    ; Of course farmers will still invest labor and inputs into these plantations, as it is not possible otherwise to have a functioning plantation otherwise...in reality the inputs 
    ; in one year also influence the productivity in later years. Therefore, I decided to allow the input of factors, although the marginal gain is negative.
    ;if (max-marginal-gain < 0) [print max-marginal-gain]
    ;ifelse max-marginal-gain <= 0 
    ;[
    ;  matrix:set factor-inputs 1 position-of-max-marginal-gain 0 ;no gain -> no labor and not input
    ;  matrix:set factor-inputs 2 position-of-max-marginal-gain 0 
    ;]
    ;[ ;max-marginal-gain > 0; in this case we need to calculate factor inputs and their costs

    
    let landuse matrix:get option-matrix 1  position-of-max-marginal-gain
    let age matrix:get option-matrix 2 position-of-max-marginal-gain 
    let fieldsize matrix:get option-matrix 3 position-of-max-marginal-gain 
    let pp-management item landuse h_management ;;<2.0>MANAGE
        
    let optimal-labor-cell (optimal-labor landuse pp-management age)   ;is 0 for initial years, as labor is put into investment    
    let optimal-tinput-cell (optimal-tinput landuse pp-management age)  ; is 0 for initial years, as tinput is put into investement   
    let wage (item pp-management [l_mng_wages] of a-lut landuse) 
    let optimal-labor-costs-patch optimal-labor-cell * fieldsize * wage
    let price-tinput (item pp-management [l_mng_price_tinput] of a-lut landuse)
    let optimal-tinput-costs-patch optimal-tinput-cell * fieldsize * price-tinput
    let optimal-flexible-costs optimal-labor-costs-patch + optimal-tinput-costs-patch
      
    ifelse wealth - optimal-flexible-costs >= 0 ;here it is really >= 0 as in this stage we can use all wealth
    [
      set wealth wealth - optimal-flexible-costs
        
      ;print (word "labor: " optimal-labor-cell " /  tinput: " optimal-tinput-cell)
      
      matrix:set factor-inputs 1 position-of-max-marginal-gain optimal-labor-cell ;store factor for this field input in a matrix  
      matrix:set factor-inputs 2 position-of-max-marginal-gain optimal-tinput-cell 

    ]
    [  ;wealth cannot cover optimal labor and tinput, therefore reduce factor input of this field such that the total wealth is consumed
       
      let patch-id matrix:get option-matrix 0 position-of-max-marginal-gain
      let reduced-factor-inputs calculated-reduced-factor-inputs-cell wealth option-matrix patch-id
         
      set wealth 0
         
      
      matrix:set factor-inputs 1 position-of-max-marginal-gain item 0 reduced-factor-inputs
      matrix:set factor-inputs 2 position-of-max-marginal-gain item 1 reduced-factor-inputs 

    ]      
    ;] 
   
    set counter counter + 1   
  ]
  
  ;print (word "fact end: " matrix:pretty-print-text factor-inputs)
   
  report factor-inputs   
  
End  


;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To-report calculated-reduced-factor-inputs-cell [hwealth option-matrix patch-id]
  ;reduce factor input of this field such that the total wealth is consumed
  ;reports factor inputs for labor [hour] and tinput [Ton] on the cell level
   
  let reduced-labor-input 0
  let reduced-tinput 0
 
  if hwealth > 0
  [  
    ;get landuse and age of the field from the option-matrix
    let field-ids matrix:get-row option-matrix 0
    let position-in-option position patch-id field-ids
    let landuse matrix:get option-matrix 1 position-in-option
    let pp-management item landuse h_management  ; <2.0>MANAGE  
    let age matrix:get option-matrix 2 position-in-option 
    let fieldsize matrix:get option-matrix 3 position-in-option
  
    set hwealth hwealth / fieldsize  ;for each cell in the field the farmer can spent this amount
  
    ;calculate maximal production and associated labor [h] and tinput [tons]
    let max-production calculate_maximum_production_cell landuse pp-management age  ;is 0 for intial years of plantation    
    let opt-labor (optimal-labor landuse pp-management age)   ;is also 0 for initial years, as labor is put into investment  
    let opt-tinput (optimal-tinput landuse pp-management age) ; is also 0 for initial years, as tinput is put into investement  
  
    ;calculate labor and tinput costs for maximal production
    let wage (item pp-management [l_mng_wages] of a-lut landuse) 
    let opt-labor-cost opt-labor * wage  ;costs for optimal labor input in one cell
    
    let price-tinput (item pp-management [l_mng_price_tinput] of a-lut landuse) 
    let opt-tinput-cost opt-tinput * price-tinput  ;costs for optiomal tinput in one cell
  
    set reduced-labor-input 0
    set reduced-tinput 0
  
    if max-production > 0
    [
      let cost-one-unit-production (opt-labor-cost + opt-tinput-cost) / max-production ;labor and tinput costs for one unit of production
      let affordable-units-production hwealth / cost-one-unit-production ;household can affort this number of units
      set reduced-labor-input (opt-labor / max-production) * affordable-units-production ;ToDo check if this is correct
      set reduced-tinput (opt-tinput / max-production) * affordable-units-production ;ToDo check if this is correct
   
      ;test: the summed up reduced labor-costs and tinput-costs needs to equal wealth
      let labor-cost-reduced reduced-labor-input * wage
      let tinput-cost-reduced reduced-tinput * price-tinput    
    ]
  ]
  
  report (list reduced-labor-input reduced-tinput)
End  

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To-report calculate-marginal-gains-one-option [option-matrix]
  ;calculates marginal gains of all fields of a household under on option
  ;reports a list containing these marginal gains
  let marginal-gains-fields []
  let number-of-fields item 1 matrix:dimensions option-matrix 
  
  let field 0 
     
  while [field < number-of-fields]
  [
    let landuse matrix:get option-matrix 1 field 
    let age matrix:get option-matrix 2 field 
    let pp-management item landuse h_management
    
    ;; Calculate production and inputs:
    let max-production calculate_maximum_production_cell landuse pp-management age
    let opt-labor (optimal-labor landuse pp-management age)
    let opt-tinput (optimal-tinput landuse pp-management age)
    let wage (item pp-management [l_mng_wages] of a-lut landuse )
    let opt-labor-cost opt-labor * wage
    let price-tinput (item pp-management [l_mng_price_tinput] of a-lut landuse)
    let opt-tinput-cost opt-tinput * price-tinput 
    let marginal-gain 0
    
    ;; Calculate marginal-gain:
    ifelse max-production > 0
    [
      let cost-one-unit-production (opt-labor-cost + opt-tinput-cost) / max-production ;labor and tiput costs for one unit of production  
      let output-price ifelse-value (member? landuse LUT-ids) [item landuse prices][0]
      set marginal-gain output-price - cost-one-unit-production
      
      ;if (marginal-gain < 0) [set marginal-gain 0]  ;; QUICKFIX!!!
      ;;
      ;; COMMENT JS 2020:
      ;; I added this negative cap for marginal gain -> need to check with Jann!!
      ;; In the previous version (Claudia/Elisabeth) marginal gain could lead to negative values -> This then led to negative production values and negative cashflow!
      
      
      ;print (word "unitcost: " cost-one-unit-production " outprice: " output-price  "prices:" prices)
    ]
    [ 
      set marginal-gain 0 ;if production is 0 
    ] 
    
     
    set marginal-gains-fields lput marginal-gain marginal-gains-fields
    set field field + 1 
  ]
  
  report marginal-gains-fields
End  
