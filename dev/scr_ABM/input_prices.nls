;###################################################################################
; ╔═╗┬─┐┬┌─┐┌─┐  ╔╦╗┬ ┬┌┐┌┌─┐┌┬┐┬┌─┐┌─┐
; ╠═╝├┬┘││  ├┤    ║║└┬┘│││├─┤│││││  └─┐
; ╩  ┴└─┴└─┘└─┘  ═╩╝ ┴ ┘└┘┴ ┴┴ ┴┴└─┘└─┘
;###################################################################################


to update_prices
  ;; Read the actual price for this tick from the price matrix:
  set prices but-first matrix:get-row prices-matrix (ticks + 1)
   
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To-report create-prices-matrix
  
  ;; This function report a price matrix, dependend on the current scenario:
  
  ;; First create an empty matrix:
  let prices-n-ticks (sim-time + 2)
  let prices-temp-matrix matrix:make-constant prices-n-ticks (length LUT-ids + 1) 0 ; temporary storage of prices data ;; +2: One additional row for tick 0 and one additional tick for previous price (tick -1)
  
  ;; Fill in the three rows
  ;; First row is always the same:  -1 0 1 ... sim-time
  matrix:set-column prices-temp-matrix 0 n-values prices-n-ticks [i -> i - 1]
  
  ;; Create price rows for each LUT, depending on scenario:
  foreach LUT-ids
  [
    LUT-id ->
     matrix:set-column prices-temp-matrix (LUT-id + 1) create-prices LUT-id prices-n-ticks
  ]
 
 report prices-temp-matrix
End

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to-report create-prices [lut nticks]
 
  let price-rows []
 
  if (price_scenario = "constant_prices") [set price-rows create-prices-constant lut nticks]
  if (price_scenario = "variable_prices") [set price-rows create-prices-variable lut nticks]
  if (price_scenario = "correlated_prices_1") [set price-rows create-prices-corr lut nticks]                                
  if (price_scenario = "random_walk") [set price-rows create-prices-rw lut nticks]
  if (price_scenario = "historical_trends") [set price-rows create-prices-hist lut]
  if (price_scenario = "production-related") [set price-rows create-prices-prod]
  if (price_scenario = "price_shock") [set price-rows create-prices-constant-shock lut nticks]

  report price-rows

end  

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to-report create-prices-constant [lut nticks]
  
  ;; Create rows with constant price values for length sim-time + 2:
  let price-row n-values nticks [runresult (word "LUT-" lut "-price")]
  ;let rubber-row n-values (sim-time + 2) [rubber-price]
  
  report price-row
  
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to-report create-prices-constant-shock [lut nticks]
  
  let price-row []
  
  ;; Add price for tick -1:
  set price-row lput runresult (word "LUT-" lut "-price") price-row
  
  ;; Store these starting prices as local variables:
  let init-price item 0 price-row
  
  ;; Loop through the sim-time horizon and create prices based on the previous ones and store them in the final lists:
  let t 0
  repeat (nticks - 1)
  [
    let price-new ifelse-value (t <= runresult (word "LUT-" lut "-shock-t")) [init-price][init-price + init-price * runresult (word "LUT-" lut "-shock-p")]
    ;; Check if prices are negative:
    if price-new < 0 [set price-new 0]
    ;; Store the new price in the list
    set price-row lput price-new price-row
    set t (t + 1)
  
  ]
  
  report price-row
  
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to-report create-prices-variable [lut nticks]
  ;new price is initial price with added variation of +- price-fluctuation-% (see GUI)
  
  let price-row []
  
  ;; Add price for tick -1:
  set price-row lput runresult (word "LUT-" lut "-price") price-row
  
  ;; Store these starting prices as local variables:
  let init-price item 0 price-row
  
  ;; Loop through the sim-time horizon and create prices based on the previous ones and store them in the final lists:
  repeat (nticks - 1)
  [
    ;; Calculate the variation range based on previous price and fluctuation
    let price-range init-price * price-fluctuation-percent / 100 * 2  ;+- fluctuation percent
    ;; Draw variation:
    let variation random-float price-range
    ;; Calculate the new price
    let price-new precision (init-price + variation - price-range / 2) 2
    ;; Check if prices are negative:
    if price-new < 0 [set price-new 0]
    ;; Store the new price in the list
    set price-row lput price-new price-row
  ]
  
  report price-row

end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to-report create-prices-corr [lut nticks]
   ;new price is price from previous year with added random variation of +- price-fluctuation-% (see GUI)
 
  let price-row []
  
  ;; Add price for tick -1:
  set price-row lput runresult (word "LUT-" lut "-price") price-row
  
  ;; Store these starting prices as local variables:
  let actual-price item 0 price-row

  ;; Loop through the sim-time horizon and create prices based on the previous ones and store them in the final lists:
  repeat (nticks - 1)
  [
    ;; Calculate the variation range based on previous price and fluctuation
    let price-range actual-price * price-fluctuation-percent / 100 * 2  ;+- fluctuation percent
    ;; Draw variation:
    let variation random-float price-range
    ;; Calculate the new price
    let price-new precision (actual-price + variation - price-range / 2) 2
    ;; Check if prices are negative:
    if price-new < 0 [set price-new 0]
    ;; Store the new price in the list
    set price-row lput price-new price-row
    ;; Use new price for next loop
    set actual-price price-new
  ]
  report price-row
  
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to-report create-prices-rw [lut nticks]
  ;gaussian random walk of prices
  ;price is calculated as price from previous year + normal distributed random number with mean price_mu and standard deviation price_sd
  ; price_mu gives the expected slope of the price function.
  ;; Create empty list
  let price-row []
  ;; Add price for tick -1:
  set price-row lput runresult (word "LUT-" lut "-price") price-row
  
 ;; Store these starting prices as local variables:
 let actual-price item 0 price-row

 ;; Loop through the sim-time horizon and create prices based on the previous ones and store them in the final lists:
 repeat (nticks - 1)
 [
    ;; Draw variation:
    let variation random-normal runresult (word "LUT-" lut "-price-mu") runresult (word "LUT-" lut "-price-sd")
    ;; Calculate new prices:
    let price-new actual-price + variation
    ;; Check if prices are negative:
    if price-new < 0 [set price-new 0]
    ;; Store the new price in the list
    set price-row lput price-new price-row
    ;; Use new price for next loop
    set actual-price price-new
  ]
  
  report price-row
   
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to-report create-prices-hist [lut]
  
  let price-row [l_prices] of a-lut lut
  
  ;; If smoothing is > 0 apply moving window smoother:
  if (historical_smoothing > 0)
  [
    let price-row-new []
    let i 0
    while [i < length price-row]
    [
      let window_min max (list (i - historical_smoothing) 0)
      let window_max min (list (i + historical_smoothing) length price-row)
      set price-row-new lput mean sublist price-row window_min window_max price-row-new
      set i (i + 1)
    ]
    set price-row price-row-new
  ]
  
  report price-row
 
end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

to-report create-prices-prod
  
  user-message "NOT IMPLEMENTED YET"
  
  ;; We can not implement this in the way like the other prices. 
  ;; Prdocution related means, we can not create the price matrix beforehand.

end
  
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
