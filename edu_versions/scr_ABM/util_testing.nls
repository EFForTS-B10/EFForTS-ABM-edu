 
;to-report linear-function-given-two-points [P1 P2]
;
;  ;; Calculate linear functions given two points:
;  ; y = ax + b
;  ; y = ((y2 - y1) / (x2 - x1)) * x + ((x2*y1 - x1*y2) / (x2 - x1))
;
;let x1 item 0 P1
;let y1 item 1 P1
;let x2 item 0 P2
;let y2 item 1 P2
;let m ((y2 - y1) / (x2 - x1))
;let b ((x2 * y1 - x1 * y2) / (x2 - x1))
;
;report (list m b)
;  
;end
;

to test-decide-management
  
  ;; Check if expected netcashflow is negative:
  ifelse (h_netcashflow_exp <= 0)
  [
    ;; check if household has rubber fields:
    if (any? h_patches with [p_landuse = 1])
    [
      ;print (word "I am a rubber farmer switching to fallow: " h_netcashflow_exp)
      set h_management replace-item 1 h_management 1
      ask h_patches [set p_management item p_landuse [h_management] of myself]
    ]
    
  ]
  [
    ;; Reset rubber management to 0 = conventional
    set h_management replace-item 1 h_management 0
   ask h_patches [set p_management item p_landuse [h_management] of myself] 
  ]
end

to test-clustering
  
  let pids filter [i -> i != -1] remove-duplicates [p_id] of patches
  
  while [length pids > 0]
  [
    ;; Choose one pid:
    let pid.i one-of pids
    
    ;; 
    let neighboring.pids []
    ask patches with [p_id = pid.i]
    [
      set neighboring.pids lput filter [i -> i != pid.i] remove-duplicates [p_id] of neighbors neighboring.pids
    ] 
  ]  
end



;;;;;;;;;;
to write-invest-grids
  
  gis:store-dataset gis:patch-dataset p_landuse "test.asc"
  print "Test"
  
  
  
end